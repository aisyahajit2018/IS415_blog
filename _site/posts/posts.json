[
  {
    "path": "posts/2021-08-30-in-class-exercise-3/",
    "title": "In-class Exercise 3",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Nor Aisyah",
        "url": "https://www.linkedin.com/in/nor-aisyah/"
      }
    ],
    "date": "2021-08-30",
    "categories": [],
    "contents": "\r\n1. Installing and loading required packages\r\n\r\n\r\npackages = c('sf', 'tmap', 'tidyverse')\r\nfor (p in packages){\r\n  if(!require(p, character.only = T)){\r\n    install.packages(p)\r\n  }\r\n  library(p,character.only = T)\r\n}\r\n\r\n\r\n\r\n2. Import Data\r\n\r\n\r\nmpszpop2020 <- read_rds(\"data/rds/mpszpop2020.rds\")\r\n\r\n\r\n\r\n3. Plot a quantile map of initial data\r\nCan see that there are missing values in AGED\r\n\r\n\r\n\r\n4. Visualise Extreme Values\r\n4.1 Box plot\r\n\r\n\r\n\r\n4.2 Percentile Map\r\nUsually 6 categories\r\nExtreme values are much better highlighted\r\n4.2.1 Extract a variable from sf data frame\r\n4.2.1.1 Exclude records with NA\r\n\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  drop_na()\r\n\r\n\r\n\r\n4.2.1.2 See range of DEPENDENCY (Extra: For my understanding)\r\n\r\n\r\nrange(mpszpop2020a$DEPENDENCY)\r\n\r\n\r\n[1]  0 19\r\n\r\n4.2.1.3 See quartiles of DEPENDENCY (Extra: For my understanding)\r\n\r\n\r\nquantile(mpszpop2020a$DEPENDENCY)\r\n\r\n\r\n        0%        25%        50%        75%       100% \r\n 0.0000000  0.6518626  0.7024793  0.7645065 19.0000000 \r\n\r\n4.2.1.4 Defining a different set of quartiles\r\n\r\n\r\npercent <- c(0, .01, .1, .5, .9, .99, 1)\r\nvar <- mpszpop2020a[\"DEPENDENCY\"] %>% \r\n  st_set_geometry(NULL)\r\nquantile(var[,1], percent)\r\n\r\n\r\n        0%         1%        10%        50%        90%        99% \r\n 0.0000000  0.1377778  0.5686120  0.7024793  0.8474114  1.2100000 \r\n      100% \r\n19.0000000 \r\n\r\n4.2.2 Creating the get.var function\r\n\r\n\r\nget.var<-function(vname, df) {\r\n  v <- df[vname]%>%\r\n  st_set_geometry(NULL)\r\n  v <- unname(v[,1])\r\n  return(v)\r\n}\r\n\r\n\r\n\r\n4.2.3 Plotting a percentile map using tmap functions\r\nThis plot has empty holes (because we removed NA)\r\nThis is what we normally do\r\n\r\n\r\npercent <- c(0, .01, .1, .5, .9, .99, 1)\r\nvar <- get.var(\"DEPENDENCY\", mpszpop2020a)\r\nbperc <- quantile(var, percent)\r\ntm_shape(mpszpop2020a) + \r\n  tm_polygons() + \r\n  tm_shape(mpszpop2020a) + \r\n  tm_fill(\"DEPENDENCY\", \r\n          breaks=bperc, \r\n          palette=\"Blues\",\r\n          labels=c(\"< 1%\", \"1%-10%\", \"10%-50%\", \"50%-90%\", \"90%-99%\", \">99%\"))+\r\n  tm_borders() +\r\n  tm_layout(title = \"Percentile Map\", title.position = c(\"right\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n4.2.4 Plotting a percentile map using a function\r\nThis plot will not have empty holes (since we have filled it)\r\nThe idea is to Plot as a polygon first then the fill function so that won’t get awkward spaces after removing NA values\r\n\r\n\r\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\r\n  percent <- c(0,.01, .1,.5,.9,.99,1)\r\n  var <- get.var(vnam,df)\r\n  bperc <- quantile (var, percent)\r\n  tm_shape (mpszpop2020) + \r\n    tm_polygons() + \r\n    tm_shape(df)+\r\n    tm_fill(vnam, title=legtitle, breaks=bperc, palette=\"Blues\", \r\n            labels = c(\"< 1%\", \"1%-10%\", \"10%-50%\", \"50%-90%\", \"90%-99%\", \">99%\"))+\r\n     tm_borders() +\r\n    tm_layout(title = mtitle, title.position=c(\"right\", \"bottom\"))\r\n    \r\n}\r\n\r\n\r\n\r\n4.2.4.1 Test the percentile mapping function - AGED\r\n\r\n\r\npercentmap(\"AGED\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\n4.2.4.2 Test the percentile mapping function - YOUNG\r\n\r\n\r\npercentmap(\"YOUNG\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\nJust for my understanding (to see the difference in map after choosing a different palette): Please ignore this section\r\nA percentile mapping function (PRGn palette)\r\n\r\n\r\n## Plot as a polygon first \r\n# then fill function so that you wont get the awkward spaces after removing NA values\r\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\r\n  percent <- c(0,.01, .1,.5,.9,.99,1)\r\n  var <- get.var(vnam,df)\r\n  bperc <- quantile (var, percent)\r\n  tm_shape (mpszpop2020) + \r\n    tm_polygons() + \r\n    tm_shape(df)+\r\n    tm_fill(vnam, title=legtitle, breaks=bperc, palette=\"PRGn\", \r\n            labels = c(\"< 1%\", \"1%-10%\", \"10%-50%\", \"50%-90%\", \"90%-99%\", \">99%\"))+\r\n     tm_borders() +\r\n    tm_layout(title = mtitle, title.position=c(\"right\", \"bottom\"))\r\n    \r\n}\r\n\r\n\r\n\r\nTest function\r\n\r\n\r\npercentmap(\"AGED\", mpszpop2020a)\r\n\r\n\r\n\r\n\r\n4.3 Box Map\r\nHelps to identify the lower and upper outliers\r\n4.3.1 Creating the boxbreaks function\r\n\r\n\r\n  # identify outliers using upper and lower percentile\r\nboxbreaks <- function(v,mult=1.5) {\r\n  qv <- unname(quantile(v))\r\n  iqr <- qv[4] - qv[2]\r\n  upfence <- qv[4] + mult * iqr\r\n  lofence <- qv[2] - mult * iqr\r\n  # initialize break points vector\r\n  bb <- vector(mode=\"numeric\",length=7)\r\n  # logic for lower and upper fences\r\n  if (lofence < qv[1]) {  # no lower outliers\r\n    bb[1] <- lofence\r\n    bb[2] <- floor(qv[1])\r\n  } else {\r\n    bb[2] <- lofence\r\n    bb[1] <- qv[1]\r\n  }\r\n  if (upfence > qv[5]) { # no upper outliers\r\n    bb[7] <- upfence\r\n    bb[6] <- ceiling(qv[5])\r\n  } else {\r\n    bb[6] <- upfence\r\n    bb[7] <- qv[5]\r\n  }\r\n  bb[3:5] <- qv[2:4]\r\n  return(bb)\r\n}\r\n\r\n\r\n\r\n4.3.2 Test the boxbreak function\r\n\r\n\r\nvar <- get.var(\"AGED\", mpszpop2020a) \r\nboxbreaks(var)\r\n\r\n\r\n\r\n4.3.3 Ensure that AGED doesn’t contain 0 (although already removed previously)\r\n\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  filter(AGED>=0)\r\nvar <- get.var(\"AGED\", mpszpop2020a)\r\nboxbreaks(var)\r\n\r\n\r\n[1] -4330     0   515  2080  3745  8590 20240\r\n\r\n4.3.4 Creating Boxmap function (This will have holes)\r\n\r\n\r\nboxmap <- function(vnam, df, \r\n                   legtitle=NA,\r\n                   mtitle=\"Box Map\",\r\n                   mult=1.5){\r\n  var <- get.var(vnam,df)\r\n  bb <- boxbreaks(var)\r\n  tm_shape(df) +\r\n     tm_fill(vnam,title=legtitle,\r\n             breaks=bb,\r\n             palette=\"Blues\",\r\n          labels = c(\"lower outlier\", \r\n                     \"< 25%\", \r\n                     \"25% - 50%\", \r\n                     \"50% - 75%\",\r\n                     \"> 75%\", \r\n                     \"upper outlier\"))  +\r\n  tm_borders() +\r\n  tm_layout(title = mtitle, \r\n            title.position = c(\"right\",\r\n                               \"bottom\"))\r\n}\r\n\r\n\r\n\r\n4.3.5 Plot box map - ECONOMY ACTIVE (Have holes)\r\n\r\n\r\n\r\n4.3.6 Tidy version of box map (No holes, nicer to see)\r\n\r\n\r\n\r\n4.3.7 Plot box map - ECONOMY ACTIVE (Have holes)\r\n\r\n\r\n\r\n4.4 Choropleth Map for Rates\r\n4.4.1 Comparing distribution of total and aged population, 2020\r\n4.4.1.1 TOTAL\r\n\r\n\r\n\r\n4.4.1.2 AGED\r\n\r\n\r\n\r\n4.5 Raw Rate map\r\n\r\n\r\nmpszpop2020a <- mpszpop2020 %>%\r\n  mutate(`AGED%` = (`AGED`/`TOTAL`) * 100) %>%\r\n  filter (`AGED%` >= 0)\r\n\r\n\r\n\r\n4.5.1 Plot Raw Rate map\r\n\r\n[1] -2.17276  0.00000 11.28169 16.48199 20.25132 33.70576 95.00000\r\n\r\n\r\n4.6 Compare Absolute and Rate Choropleth Maps\r\n4.6.1 Absolute\r\n\r\n\r\n\r\n4.6.2 Rate\r\n\r\n\r\n\r\nThere is a difference in the colours.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-30-in-class-exercise-3/in-class-exercise-3_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-08-31T09:47:38+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-29-hands-on-exercise-3/",
    "title": "Hands-on Exercise 3",
    "description": "In this hands-on exercise, I learn how to plot functional and truthful choropleth maps by using an R package called tmap package.",
    "author": [
      {
        "name": "Nor Aisyah",
        "url": "https://www.linkedin.com/in/nor-aisyah/"
      }
    ],
    "date": "2021-08-29",
    "categories": [],
    "contents": "\r\n1. Importing Packages\r\n\r\n\r\npackages = c('sf', 'tmap', 'tidyverse')\r\nfor (p in packages){\r\n  if(!require(p, character.only = T)){\r\n    install.packages(p)\r\n  }\r\n  library(p,character.only = T)\r\n}\r\n\r\n\r\n\r\n2. Importing data in R\r\n2.1 Importing Geospatial Data into R\r\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\r\n\r\n\r\nmpsz <- st_read(dsn = \"data/geospatial\", \r\n                layer = \"MP14_SUBZONE_WEB_PL\")\r\n\r\n\r\nReading layer `MP14_SUBZONE_WEB_PL' from data source \r\n  `C:\\aisyahajit2018\\IS415\\IS415_blog\\_posts\\2021-08-29-hands-on-exercise-3\\data\\geospatial' \r\n  using driver `ESRI Shapefile'\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\n\r\n2.2 Examine the content of mpsz\r\n\r\n\r\nmpsz\r\n\r\n\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\nFirst 10 features:\r\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND\r\n1         1          1    MARINA SOUTH    MSSZ01      Y\r\n2         2          1    PEARL'S HILL    OTSZ01      Y\r\n3         3          3       BOAT QUAY    SRSZ03      Y\r\n4         4          8  HENDERSON HILL    BMSZ08      N\r\n5         5          3         REDHILL    BMSZ03      N\r\n6         6          7  ALEXANDRA HILL    BMSZ07      N\r\n7         7          9   BUKIT HO SWEE    BMSZ09      N\r\n8         8          2     CLARKE QUAY    SRSZ02      Y\r\n9         9         13 PASIR PANJANG 1    QTSZ13      N\r\n10       10          7       QUEENSWAY    QTSZ07      N\r\n        PLN_AREA_N PLN_AREA_C       REGION_N REGION_C\r\n1     MARINA SOUTH         MS CENTRAL REGION       CR\r\n2           OUTRAM         OT CENTRAL REGION       CR\r\n3  SINGAPORE RIVER         SR CENTRAL REGION       CR\r\n4      BUKIT MERAH         BM CENTRAL REGION       CR\r\n5      BUKIT MERAH         BM CENTRAL REGION       CR\r\n6      BUKIT MERAH         BM CENTRAL REGION       CR\r\n7      BUKIT MERAH         BM CENTRAL REGION       CR\r\n8  SINGAPORE RIVER         SR CENTRAL REGION       CR\r\n9       QUEENSTOWN         QT CENTRAL REGION       CR\r\n10      QUEENSTOWN         QT CENTRAL REGION       CR\r\n            INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\r\n1  5ED7EB253F99252E 2014-12-05 31595.84 29220.19   5267.381\r\n2  8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05   3506.107\r\n3  C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66   1740.926\r\n4  3775D82C5DDBEFBD 2014-12-05 26782.83 29933.77   3313.625\r\n5  85D9ABEF0A40678F 2014-12-05 26201.96 30005.70   2825.594\r\n6  9D286521EF5E3B59 2014-12-05 25358.82 29991.38   4428.913\r\n7  7839A8577144EFE2 2014-12-05 27680.06 30230.86   3275.312\r\n8  48661DC0FBA09F7A 2014-12-05 29253.21 30222.86   2208.619\r\n9  1F721290C421BFAB 2014-12-05 22077.34 29893.78   6571.323\r\n10 3580D2AFFBEE914C 2014-12-05 24168.31 30104.18   3454.239\r\n   SHAPE_Area                       geometry\r\n1   1630379.3 MULTIPOLYGON (((31495.56 30...\r\n2    559816.2 MULTIPOLYGON (((29092.28 30...\r\n3    160807.5 MULTIPOLYGON (((29932.33 29...\r\n4    595428.9 MULTIPOLYGON (((27131.28 30...\r\n5    387429.4 MULTIPOLYGON (((26451.03 30...\r\n6   1030378.8 MULTIPOLYGON (((25899.7 297...\r\n7    551732.0 MULTIPOLYGON (((27746.95 30...\r\n8    290184.7 MULTIPOLYGON (((29351.26 29...\r\n9   1084792.3 MULTIPOLYGON (((20996.49 30...\r\n10   631644.3 MULTIPOLYGON (((24472.11 29...\r\n\r\n2.3 Import Attribute Data into R\r\n\r\n\r\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\r\n\r\n\r\n\r\n2.4 Data Preparation\r\nPrepare data table with variables like: -PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY -(PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile)*\r\n2.4.1 Data Wrangling\r\n\r\n\r\npopdata2020 <- popdata %>%\r\n  filter(Time == 2020) %>%\r\n  group_by(PA, SZ, AG) %>%\r\n  summarise(`POP` = sum(`Pop`)) %>%\r\n  ungroup()%>%\r\n  pivot_wider(names_from=AG, \r\n              values_from=POP) %>%\r\n  mutate(YOUNG = rowSums(.[3:6])\r\n         +rowSums(.[12])) %>%\r\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\r\nrowSums(.[13:15]))%>%\r\nmutate(`AGED`=rowSums(.[16:21])) %>%\r\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \r\nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\r\n/`ECONOMY ACTIVE`) %>%\r\n  select(`PA`, `SZ`, `YOUNG`, \r\n       `ECONOMY ACTIVE`, `AGED`, \r\n       `TOTAL`, `DEPENDENCY`)\r\n\r\n\r\n\r\n2.5 Join the attribute data and geospatial data\r\nMust convert to uppercase since one column is in uppercase and the other is not.\r\n\r\n\r\npopdata2020 <- popdata2020 %>%\r\nmutate_at(.vars = vars(PA, SZ), \r\n        .funs = funs(toupper)) %>%\r\nfilter(`ECONOMY ACTIVE` > 0)\r\n\r\n\r\n\r\n\r\n2.6 Join the geographical data and attribute table\r\n\r\n\r\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\r\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\n3.0 Choropleth Mapping Geospatial Data Using tmap\r\n3.1 Draw a cartographic standard choropleth map as shown below.\r\n\r\n\r\ntmap_mode(\"plot\")\r\nqtm(mpsz_pop2020, \r\n    fill = \"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n3.2 Create choropleth map by using tmap’s elements\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\",\r\n          title = \"Dependency ratio\") +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_borders(alpha = 0.5) +\r\n  tm_compass(type=\"8star\", size = 2) +\r\n  tm_scale_bar() +\r\n  tm_grid(alpha =0.2) +\r\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \r\n             position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n3.3 Drawing a base map\r\n\r\n\r\ntm_shape(mpsz_pop2020) +\r\n  tm_polygons()\r\n\r\n\r\n\r\n\r\n3.4 Drawing a choropleth map using tm_polygons()\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_polygons(\"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n3.5 Drawing a choropleth map using tm_fill() and *tm_border()**\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\")\r\n\r\n\r\n\r\n\r\n3.6 Add the boundary of the planning subzones\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\") +\r\n  tm_borders(lwd = 0.1,  alpha = 1)\r\n\r\n\r\n\r\n\r\n3.7 Plotting choropleth maps with built-in classification methods\r\n3.7.1 Quantile data classification\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 5,\r\n          style = \"jenks\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n3.7.2 Equal data classification\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 5,\r\n          style = \"equal\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n3.7.3 PLOTTING CHOROPLETH MAP WITH CUSTOM BREAK\r\n3.7.4 Show descriptive statistics of DEPENDENCY field\r\n\r\n\r\nsummary(mpsz_pop2020$DEPENDENCY)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \r\n\r\n3.7.5 Plot the choropleth map\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n4.0 Changing Colour Scheme\r\n4.1 Change the colour\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          n = 6,\r\n          style = \"quantile\",\r\n          palette = \"Blues\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n4.2 Reverse the colour shading\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\",\r\n          style = \"quantile\",\r\n          palette = \"-Greens\") +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n4.2 Map layouts\r\n4.2.1 Map legend\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"jenks\", \r\n          palette = \"Blues\", \r\n          legend.hist = TRUE, \r\n          legend.is.portrait = TRUE,\r\n          legend.hist.z = 0.1) +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            legend.outside = FALSE,\r\n            legend.position = c(\"right\", \"bottom\"),\r\n            frame = FALSE) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n4.2.2 Classic map style\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"-Greens\") +\r\n  tm_borders(alpha = 0.5) +\r\n  tmap_style(\"classic\")\r\n\r\n\r\n\r\n\r\n4.2.3 Draw other map furniture (Cartographic)\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\",\r\n          title = \"No. of persons\") +\r\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\r\n            main.title.position = \"center\",\r\n            main.title.size = 1.2,\r\n            legend.height = 0.45, \r\n            legend.width = 0.35,\r\n            frame = TRUE) +\r\n  tm_borders(alpha = 0.5) +\r\n  tm_compass(type=\"8star\", size = 2) +\r\n  tm_scale_bar(width = 0.15) +\r\n  tm_grid(lwd = 0.1, alpha = 0.2) +\r\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \r\n             position = c(\"left\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n4.2.4 Reset the default style\r\n\r\n\r\ntmap_style(\"white\")\r\n\r\n\r\n\r\n4.3 Drawing Small Multiple Choropleth Maps\r\n4.3.1 Small multiple choropleth maps are created defining ncols in tm_fill()\r\n\r\n\r\ntm_shape(mpsz_pop2020)+\r\n  tm_fill(c(\"YOUNG\", \"AGED\"),\r\n          style = \"equal\", \r\n          palette = \"Blues\") +\r\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\r\n  tm_borders(alpha = 0.5) +\r\n  tmap_style(\"white\")\r\n\r\n\r\n\r\n\r\n4.3.2 Small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\r\n\r\n\r\ntm_shape(mpsz_pop2020)+ \r\n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\r\n          style = c(\"equal\", \"quantile\"), \r\n          palette = list(\"Blues\",\"Greens\")) +\r\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\r\n\r\n\r\n\r\n\r\n4.3.3 Multiple small choropleth maps are created by using tm_facets().\r\n\r\n\r\ntm_shape(mpsz_pop2020) +\r\n  tm_fill(\"DEPENDENCY\",\r\n          style = \"quantile\",\r\n          palette = \"Blues\",\r\n          thres.poly = 0) + \r\n  tm_facets(by=\"REGION_N\", \r\n            free.coords=TRUE, \r\n            drop.shapes=TRUE) +\r\n  tm_layout(legend.show = FALSE,\r\n            title.position = c(\"center\", \"center\"), \r\n            title.size = 20) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n4.3.4 Multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\r\n\r\n\r\nyoungmap <- tm_shape(mpsz_pop2020)+ \r\n  tm_polygons(\"YOUNG\", \r\n              style = \"quantile\", \r\n              palette = \"Blues\")\r\nagedmap <- tm_shape(mpsz_pop2020)+ \r\n  tm_polygons(\"AGED\", \r\n              style = \"quantile\", \r\n              palette = \"Blues\")\r\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\r\n\r\n\r\n\r\n\r\n4.4 Mappping Spatial Object Meeting a Selection Criterion\r\n4.4.1 Use selection funtion to map spatial objects meeting the selection criterion.\r\n\r\n\r\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\r\n  tm_fill(\"DEPENDENCY\", \r\n          style = \"quantile\", \r\n          palette = \"Blues\", \r\n          legend.hist = TRUE, \r\n          legend.is.portrait = TRUE,\r\n          legend.hist.z = 0.1) +\r\n  tm_layout(legend.outside = TRUE,\r\n            legend.height = 0.45, \r\n            legend.width = 5.0,\r\n            legend.position = c(\"right\", \"bottom\"),\r\n            frame = FALSE) +\r\n  tm_borders(alpha = 0.5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-29-hands-on-exercise-3/hands-on-exercise-3_files/figure-html5/unnamed-chunk-9-1.png",
    "last_modified": "2021-08-30T11:56:32+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-26-hands-on-exercise-2/",
    "title": "Hands-on Exercise 2",
    "description": "In this hands-on exercise, I learn how to handle geospatial data in R by using sf package and performing data science tasks using tidyverse package.",
    "author": [
      {
        "name": "Nor Aisyah",
        "url": "https://www.linkedin.com/in/nor-aisyah/"
      }
    ],
    "date": "2021-08-26",
    "categories": [],
    "contents": "\r\nGetting Started\r\nThis code chunk performs 3 tasks: - A list called packages will be created and will consists of all the R packages required to accomplish this hands-on exercise. - Check if R packages on package have been installed in R and if not, they will be installed. - After all the R packages have been installed, they will be loaded.\r\n\r\n\r\npackages = c('sf', 'tidyverse')\r\nfor (p in packages){\r\n  if(!require(p, character.only = T)){\r\n    install.packages(p)\r\n  }\r\n  library(p,character.only = T)\r\n}\r\n\r\n\r\n\r\nImporting Geospatial Data\r\nImporting polygon feature data in shapefile format\r\n\r\n\r\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\r\n\r\n\r\nReading layer `MP14_SUBZONE_WEB_PL' from data source \r\n  `C:\\aisyahajit2018\\IS415\\IS415_blog\\_posts\\2021-08-26-hands-on-exercise-2\\data\\geospatial' \r\n  using driver `ESRI Shapefile'\r\nSimple feature collection with 323 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\n\r\nImporting polyline feature data in shapefile form\r\n\r\n\r\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPath\")\r\n\r\n\r\nReading layer `CyclingPath' from data source \r\n  `C:\\aisyahajit2018\\IS415\\IS415_blog\\_posts\\2021-08-26-hands-on-exercise-2\\data\\geospatial' \r\n  using driver `ESRI Shapefile'\r\nSimple feature collection with 3336 features and 2 fields\r\nGeometry type: MULTILINESTRING\r\nDimension:     XY\r\nBounding box:  xmin: 12831.45 ymin: 28347.98 xmax: 42799.89 ymax: 48948.15\r\nProjected CRS: SVY21\r\n\r\nImporting GIS data in kml format\r\n\r\n\r\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\r\n\r\n\r\nReading layer `PRESCHOOLS_LOCATION' from data source \r\n  `C:\\aisyahajit2018\\IS415\\IS415_blog\\_posts\\2021-08-26-hands-on-exercise-2\\data\\geospatial\\pre-schools-location-kml.kml' \r\n  using driver `KML'\r\nSimple feature collection with 1925 features and 2 fields\r\nGeometry type: POINT\r\nDimension:     XYZ\r\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\r\nz_range:       zmin: 0 zmax: 0\r\nGeodetic CRS:  WGS 84\r\n\r\nChecking the Content of A Simple Feature Data Frame\r\nst_geometry() function\r\n\r\n\r\nst_geometry(mpsz)\r\n\r\n\r\nGeometry set for 323 features \r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\r\nProjected CRS: SVY21\r\nFirst 5 geometries:\r\n\r\nglimpse() function\r\n\r\n\r\nglimpse(mpsz)\r\n\r\n\r\nRows: 323\r\nColumns: 16\r\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15~\r\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1,~\r\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HEN~\r\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\",~\r\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\",~\r\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUK~\r\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"~\r\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGI~\r\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"~\r\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF0~\r\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, ~\r\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96,~\r\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70,~\r\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594,~\r\n$ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, 387429.4~\r\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULT~\r\n\r\nhead() function\r\n\r\n\r\nhead(mpsz, n=5)  \r\n\r\n\r\nSimple feature collection with 5 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\r\nProjected CRS: SVY21\r\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\r\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\r\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\r\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\r\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\r\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\r\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D\r\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05\r\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05\r\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05\r\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05\r\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05\r\n    X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area\r\n1 31595.84 29220.19   5267.381  1630379.3\r\n2 28679.06 29782.05   3506.107   559816.2\r\n3 29654.96 29974.66   1740.926   160807.5\r\n4 26782.83 29933.77   3313.625   595428.9\r\n5 26201.96 30005.70   2825.594   387429.4\r\n                        geometry\r\n1 MULTIPOLYGON (((31495.56 30...\r\n2 MULTIPOLYGON (((29092.28 30...\r\n3 MULTIPOLYGON (((29932.33 29...\r\n4 MULTIPOLYGON (((27131.28 30...\r\n5 MULTIPOLYGON (((26451.03 30...\r\n\r\nPlotting the Geospatial Data\r\nplot() function\r\n\r\n\r\nplot(st_geometry(mpsz))\r\n\r\n\r\n\r\n\r\nChoose plot by a specific attribute\r\n\r\n\r\nplot(mpsz[\"PLN_AREA_N\"])\r\n\r\n\r\n\r\n\r\nWorking with Projection\r\nAssigning EPSG code to a simple feature data frame\r\nst_crs function - Retrieve coordinate reference system from object\r\n\r\n\r\nst_crs(mpsz)\r\n\r\n\r\nCoordinate Reference System:\r\n  User input: SVY21 \r\n  wkt:\r\nPROJCRS[\"SVY21\",\r\n    BASEGEOGCRS[\"SVY21[WGS84]\",\r\n        DATUM[\"World Geodetic System 1984\",\r\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\r\n                LENGTHUNIT[\"metre\",1]],\r\n            ID[\"EPSG\",6326]],\r\n        PRIMEM[\"Greenwich\",0,\r\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\r\n    CONVERSION[\"unnamed\",\r\n        METHOD[\"Transverse Mercator\",\r\n            ID[\"EPSG\",9807]],\r\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\r\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\r\n            ID[\"EPSG\",8801]],\r\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\r\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\r\n            ID[\"EPSG\",8802]],\r\n        PARAMETER[\"Scale factor at natural origin\",1,\r\n            SCALEUNIT[\"unity\",1],\r\n            ID[\"EPSG\",8805]],\r\n        PARAMETER[\"False easting\",28001.642,\r\n            LENGTHUNIT[\"metre\",1],\r\n            ID[\"EPSG\",8806]],\r\n        PARAMETER[\"False northing\",38744.572,\r\n            LENGTHUNIT[\"metre\",1],\r\n            ID[\"EPSG\",8807]]],\r\n    CS[Cartesian,2],\r\n        AXIS[\"(E)\",east,\r\n            ORDER[1],\r\n            LENGTHUNIT[\"metre\",1,\r\n                ID[\"EPSG\",9001]]],\r\n        AXIS[\"(N)\",north,\r\n            ORDER[2],\r\n            LENGTHUNIT[\"metre\",1,\r\n                ID[\"EPSG\",9001]]]]\r\n\r\nAssign correct EPSG code\r\n\r\n\r\nmpsz3414 <- st_set_crs(mpsz, 3414)\r\n\r\n\r\n\r\nCheck CSR again\r\n\r\n\r\nst_crs(mpsz3414)\r\n\r\n\r\nCoordinate Reference System:\r\n  User input: EPSG:3414 \r\n  wkt:\r\nPROJCRS[\"SVY21 / Singapore TM\",\r\n    BASEGEOGCRS[\"SVY21\",\r\n        DATUM[\"SVY21\",\r\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\r\n                LENGTHUNIT[\"metre\",1]]],\r\n        PRIMEM[\"Greenwich\",0,\r\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\r\n        ID[\"EPSG\",4757]],\r\n    CONVERSION[\"Singapore Transverse Mercator\",\r\n        METHOD[\"Transverse Mercator\",\r\n            ID[\"EPSG\",9807]],\r\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\r\n            ANGLEUNIT[\"degree\",0.0174532925199433],\r\n            ID[\"EPSG\",8801]],\r\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\r\n            ANGLEUNIT[\"degree\",0.0174532925199433],\r\n            ID[\"EPSG\",8802]],\r\n        PARAMETER[\"Scale factor at natural origin\",1,\r\n            SCALEUNIT[\"unity\",1],\r\n            ID[\"EPSG\",8805]],\r\n        PARAMETER[\"False easting\",28001.642,\r\n            LENGTHUNIT[\"metre\",1],\r\n            ID[\"EPSG\",8806]],\r\n        PARAMETER[\"False northing\",38744.572,\r\n            LENGTHUNIT[\"metre\",1],\r\n            ID[\"EPSG\",8807]]],\r\n    CS[Cartesian,2],\r\n        AXIS[\"northing (N)\",north,\r\n            ORDER[1],\r\n            LENGTHUNIT[\"metre\",1]],\r\n        AXIS[\"easting (E)\",east,\r\n            ORDER[2],\r\n            LENGTHUNIT[\"metre\",1]],\r\n    USAGE[\r\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\r\n        AREA[\"Singapore - onshore and offshore.\"],\r\n        BBOX[1.13,103.59,1.47,104.07]],\r\n    ID[\"EPSG\",3414]]\r\n\r\nTransform the original data from geographic coordinate system to projected coordinate system.\r\n\r\n\r\npreschool3414 <- st_transform(preschool, crs = 3414)\r\n\r\n\r\n\r\nImporting and Converting An Aspatial Data\r\n\r\n\r\nlistings <- read_csv(\"data/aspatial/listings.csv\")\r\n\r\n\r\n\r\n\r\n\r\nglimpse(listings) \r\n\r\n\r\nRows: 4,252\r\nColumns: 16\r\n$ id                             <dbl> 50646, 71609, 71896, 71903, 2~\r\n$ name                           <chr> \"Pleasant Room along Bukit Ti~\r\n$ host_id                        <dbl> 227796, 367042, 367042, 36704~\r\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belind~\r\n$ neighbourhood_group            <chr> \"Central Region\", \"East Regio~\r\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"T~\r\n$ latitude                       <dbl> 1.33432, 1.34537, 1.34754, 1.~\r\n$ longitude                      <dbl> 103.7852, 103.9589, 103.9596,~\r\n$ room_type                      <chr> \"Private room\", \"Private room~\r\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, ~\r\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8~\r\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, ~\r\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014~\r\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20,~\r\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50,~\r\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364,~\r\n\r\nCreating a simple feature data frame from an aspatial data frame\r\n\r\n\r\nlistings_sf <- st_as_sf(listings, \r\n                       coords = c(\"longitude\", \"latitude\"),\r\n                       crs=4326) %>% st_transform(crs = 3414)\r\n\r\n\r\n\r\n\r\n\r\nglimpse(listings_sf) \r\n\r\n\r\nRows: 4,252\r\nColumns: 15\r\n$ id                             <dbl> 50646, 71609, 71896, 71903, 2~\r\n$ name                           <chr> \"Pleasant Room along Bukit Ti~\r\n$ host_id                        <dbl> 227796, 367042, 367042, 36704~\r\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belind~\r\n$ neighbourhood_group            <chr> \"Central Region\", \"East Regio~\r\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"T~\r\n$ room_type                      <chr> \"Private room\", \"Private room~\r\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, ~\r\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8~\r\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, ~\r\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014~\r\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20,~\r\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50,~\r\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364,~\r\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9~\r\n\r\nGeoprocessing with sf package\r\n\r\n\r\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)\r\n\r\n\r\n\r\n\r\n\r\nbuffer_cycling$AREA <- st_area(buffer_cycling)\r\nsum(buffer_cycling$AREA)\r\n\r\n\r\n1642750 [m^2]\r\n\r\nPoint-in-polygon count\r\nIdentify pre-schools located inside each Planning Subzone - st_intersects().\r\nCalculate numbers of pre-schools that fall inside each planning subzone using length() of Base R\r\n\r\n\r\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\r\nsummary(mpsz3414$`PreSch Count`)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \r\n   0.00    0.00    3.00    5.96    9.00   58.00 \r\n\r\nList planning subzone with most number of pre-school\r\n\r\n\r\ntop_n(mpsz3414, 1, `PreSch Count`)\r\n\r\n\r\nSimple feature collection with 1 feature and 16 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\r\nProjected CRS: SVY21 / Singapore TM\r\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N\r\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES\r\n  PLN_AREA_C    REGION_N REGION_C          INC_CRC FMEL_UPD_D\r\n1         TM EAST REGION       ER 21658EAAF84F4D8D 2014-12-05\r\n    X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area\r\n1 41122.55 37392.39   10180.62    4339824\r\n                        geometry PreSch Count\r\n1 MULTIPOLYGON (((42196.76 38...           58\r\n\r\nCalculate the density of pre-school by planning subzone.\r\n\r\n\r\nmpsz3414$Area <- mpsz3414 %>% st_area()\r\n\r\n\r\n\r\n\r\n\r\nmpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\r\n\r\n\r\n\r\nExplorotary Data Analysis (EDA)\r\nHistogram\r\n\r\n\r\nhist(mpsz3414$`PreSch Density`)\r\n\r\n\r\n\r\n\r\nHistogram using ggplot\r\n\r\n\r\nggplot(data=mpsz3414, \r\n       aes(x= as.numeric(`PreSch Density`)))+\r\n  geom_histogram(bins=20, \r\n                 color=\"black\", \r\n                 fill=\"light blue\") +\r\n  labs(title = \"Are pre-school even distributed in Singapore?\",\r\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\r\n      x = \"Pre-school density (per km sq)\",\r\n      y = \"Frequency\")\r\n\r\n\r\n\r\n\r\nDone! :)\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-26-hands-on-exercise-2/hands-on-exercise-2_files/figure-html5/unnamed-chunk-8-1.png",
    "last_modified": "2021-08-29T15:03:28+08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-23-in-class-exercise-2/",
    "title": "In-class Exercise 2",
    "description": "In this hands-on exercise, I learn how to handle geospatial data in R by using sf package.",
    "author": [
      {
        "name": "Nor Aisyah",
        "url": "https://www.linkedin.com/in/nor-aisyah/"
      }
    ],
    "date": "2021-08-23",
    "categories": [],
    "contents": "\r\nGetting Started\r\nThis code chunk performs 3 tasks:\r\ncreate a list of R packages needed.\r\n\r\n\r\npackages <- c('sf', 'tidyverse')\r\nfor(p in packages){\r\nif(!require(p, character.only = T)){\r\n  install.packages(p)\r\n}\r\nlibrary(p, character.only = T)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-08-23T11:28:39+08:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to IS415 blog",
    "description": "Welcome to our new blog, IS415 blog. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nor Aisyah",
        "url": "https://www.linkedin.com/in/nor-aisyah/"
      }
    ],
    "date": "2021-08-23",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-08-23T09:41:04+08:00",
    "input_file": {}
  }
]
